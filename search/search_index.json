{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BeginnerNN: A Beginner Neural Network Library for All Projects BeginnerNN is a simple and easy-to-use neural network library designed to help beginners get started with neural networks and machine learning projects. It\u2019s designed to be simple enough for learning, but flexible enough for use in larger projects. Features Beginner-friendly : No complex setup or dependencies. Customizable : You can easily modify the network architecture. Lightweight : Designed for small projects, but can scale for bigger ones. Installation To install BeginnerNN, run the following command: ```bash pip install BeginnerNN Once installed, you can start using it right away. Check the other pages for more details on usage and examples.","title":"Home"},{"location":"#beginnernn-a-beginner-neural-network-library-for-all-projects","text":"BeginnerNN is a simple and easy-to-use neural network library designed to help beginners get started with neural networks and machine learning projects. It\u2019s designed to be simple enough for learning, but flexible enough for use in larger projects.","title":"BeginnerNN: A Beginner Neural Network Library for All Projects"},{"location":"#features","text":"Beginner-friendly : No complex setup or dependencies. Customizable : You can easily modify the network architecture. Lightweight : Designed for small projects, but can scale for bigger ones.","title":"Features"},{"location":"#installation","text":"To install BeginnerNN, run the following command: ```bash pip install BeginnerNN Once installed, you can start using it right away. Check the other pages for more details on usage and examples.","title":"Installation"},{"location":"example/","text":"example.md ```markdown Example: Using BeginnerNN for Decision-Making Below is an example of how to use BeginnerNN for a simple decision-making problem. We\u2019ll simulate two models (Model 1 and Model 2) and train them over multiple epochs. Training Mode In training mode, we simulate decisions for both models and reward them based on their actions. The models learn to make decisions over time. ```python import os from BeginnerNN import BeginnerNN import random train = True if train: print(\"Starting Training Mode\") # Ensure the model directory exists before saving the models if not os.path.exists(\"models\"): os.makedirs(\"models\") for i in range(1000): print(f\"Running Epoch {i}.\") # Hyperparameters input_size = 1 # No input since we don't use it output_size = 2 # Set output size to 2 hidden_size = 5 learning_rate = 0.01 # Initialize the neural networks model1 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) model2 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) try: model1.load(\"models/model1.pth\") model2.load(\"models/model2.pth\") except FileNotFoundError: print(\"Models not found. Training from scratch.\") # Generate a random output between 0 and 1 (simulating decision-making) def random_output(): return random.choice([0, 1]) # 0 for \"take\", 1 for \"share\" output_1 = random_output() output_2 = random_output() # Decision logic based on output if output_1 == 0 and output_2 == 0: print(\"Both Take\") reward1 = 0 reward2 = 0 elif output_1 == 0 and output_2 == 1: print(\"Model 1 takes, Model 2 shares\") reward1 = 1 reward2 = 0 elif output_1 == 1 and output_2 == 0: print(\"Model 2 takes, Model 1 shares\") reward1 = 0 reward2 = 1 elif output_1 == 1 and output_2 == 1: print(\"Both Share\") reward1 = 0.5 reward2 = 0.5 print(f\"Model 1 Reward: {reward1}\\nModel 2 Reward: {reward2}\") model1.step([0], output_1, reward1, False) model2.step([0], output_2, reward2, False) # Save models after training each epoch model1.save(\"models/model1.pth\") model2.save(\"models/model2.pth\") Testing Mode After training, you can load the trained models and test their predictions. Testing code input_size = 1 output_size = 2 hidden_size = 5 learning_rate = 0.01 Initialize the neural networks model1 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) model2 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) model1.load(\"models/model1.pth\") model2.load(\"models/model2.pth\") Set models to output mode for testing model1.set_mode('output') model2.set_mode('output') Get the output of the models output_1 = model1.step([0]) output_2 = model2.step([0]) print(f\"Output 1: {output_1}, Output 2: {output_2}\")","title":"Example"},{"location":"example/#examplemd","text":"```markdown","title":"example.md"},{"location":"example/#example-using-beginnernn-for-decision-making","text":"Below is an example of how to use BeginnerNN for a simple decision-making problem. We\u2019ll simulate two models (Model 1 and Model 2) and train them over multiple epochs.","title":"Example: Using BeginnerNN for Decision-Making"},{"location":"example/#training-mode","text":"In training mode, we simulate decisions for both models and reward them based on their actions. The models learn to make decisions over time. ```python import os from BeginnerNN import BeginnerNN import random train = True if train: print(\"Starting Training Mode\") # Ensure the model directory exists before saving the models if not os.path.exists(\"models\"): os.makedirs(\"models\") for i in range(1000): print(f\"Running Epoch {i}.\") # Hyperparameters input_size = 1 # No input since we don't use it output_size = 2 # Set output size to 2 hidden_size = 5 learning_rate = 0.01 # Initialize the neural networks model1 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) model2 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) try: model1.load(\"models/model1.pth\") model2.load(\"models/model2.pth\") except FileNotFoundError: print(\"Models not found. Training from scratch.\") # Generate a random output between 0 and 1 (simulating decision-making) def random_output(): return random.choice([0, 1]) # 0 for \"take\", 1 for \"share\" output_1 = random_output() output_2 = random_output() # Decision logic based on output if output_1 == 0 and output_2 == 0: print(\"Both Take\") reward1 = 0 reward2 = 0 elif output_1 == 0 and output_2 == 1: print(\"Model 1 takes, Model 2 shares\") reward1 = 1 reward2 = 0 elif output_1 == 1 and output_2 == 0: print(\"Model 2 takes, Model 1 shares\") reward1 = 0 reward2 = 1 elif output_1 == 1 and output_2 == 1: print(\"Both Share\") reward1 = 0.5 reward2 = 0.5 print(f\"Model 1 Reward: {reward1}\\nModel 2 Reward: {reward2}\") model1.step([0], output_1, reward1, False) model2.step([0], output_2, reward2, False) # Save models after training each epoch model1.save(\"models/model1.pth\") model2.save(\"models/model2.pth\") Testing Mode After training, you can load the trained models and test their predictions.","title":"Training Mode"},{"location":"example/#testing-code","text":"input_size = 1 output_size = 2 hidden_size = 5 learning_rate = 0.01","title":"Testing code"},{"location":"example/#initialize-the-neural-networks","text":"model1 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) model2 = BeginnerNN(input_size, output_size, hidden_size, learning_rate) model1.load(\"models/model1.pth\") model2.load(\"models/model2.pth\")","title":"Initialize the neural networks"},{"location":"example/#set-models-to-output-mode-for-testing","text":"model1.set_mode('output') model2.set_mode('output')","title":"Set models to output mode for testing"},{"location":"example/#get-the-output-of-the-models","text":"output_1 = model1.step([0]) output_2 = model2.step([0]) print(f\"Output 1: {output_1}, Output 2: {output_2}\")","title":"Get the output of the models"},{"location":"installation/","text":"installation.md ```markdown Installation Guide Prerequisites Make sure you have Python 3.6 or higher installed on your machine. You can download Python from the official Python website . Installing BeginnerNN To install BeginnerNN, simply run the following command in your terminal: ```bash pip install BeginnerNN This will download and install the latest version of BeginnerNN. Verifying the Installation To verify that BeginnerNN is installed correctly, you can run the following Python script: import BeginnerNN print(\"BeginnerNN is successfully installed!\") If you don't encounter any errors, you're all set to start using BeginnerNN!","title":"Installation"},{"location":"installation/#installationmd","text":"```markdown","title":"installation.md"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#prerequisites","text":"Make sure you have Python 3.6 or higher installed on your machine. You can download Python from the official Python website .","title":"Prerequisites"},{"location":"installation/#installing-beginnernn","text":"To install BeginnerNN, simply run the following command in your terminal: ```bash pip install BeginnerNN This will download and install the latest version of BeginnerNN. Verifying the Installation To verify that BeginnerNN is installed correctly, you can run the following Python script: import BeginnerNN print(\"BeginnerNN is successfully installed!\") If you don't encounter any errors, you're all set to start using BeginnerNN!","title":"Installing BeginnerNN"},{"location":"usage/","text":"usage.md ```markdown Usage Guide BeginnerNN is simple to use. It comes with easy-to-follow functions and settings to create a neural network. Initializing a Model Here's how you can create a neural network model: ```python from BeginnerNN import BeginnerNN Initialize the model with input_size, output_size, hidden_size, and learning_rate model = BeginnerNN(input_size=1, output_size=2, hidden_size=5, learning_rate=0.01) Training the Model To train the model, use the step() method to provide data (state, action, reward) and update the model's weights: state = [0] action = 0 # Choose an action reward = 1 # Set the reward Train the model loss = model.step(state, action, reward) The model will update its weights based on the loss calculated during training. Switching Between Training and Testing Mode Use the set_mode() method to switch between training and testing mode: model.set_mode('train') # For training model.set_mode('output') # For testing Saving and Loading Models You can save and load models using the following methods: Save the model model.save(\"model.pth\") Load the model model.load(\"model.pth\") Refer to the example on the next page to see how this all works together in a real-world scenario.","title":"Usage"},{"location":"usage/#usagemd","text":"```markdown","title":"usage.md"},{"location":"usage/#usage-guide","text":"BeginnerNN is simple to use. It comes with easy-to-follow functions and settings to create a neural network.","title":"Usage Guide"},{"location":"usage/#initializing-a-model","text":"Here's how you can create a neural network model: ```python from BeginnerNN import BeginnerNN","title":"Initializing a Model"},{"location":"usage/#initialize-the-model-with-input_size-output_size-hidden_size-and-learning_rate","text":"model = BeginnerNN(input_size=1, output_size=2, hidden_size=5, learning_rate=0.01) Training the Model To train the model, use the step() method to provide data (state, action, reward) and update the model's weights: state = [0] action = 0 # Choose an action reward = 1 # Set the reward","title":"Initialize the model with input_size, output_size, hidden_size, and learning_rate"},{"location":"usage/#train-the-model","text":"loss = model.step(state, action, reward) The model will update its weights based on the loss calculated during training. Switching Between Training and Testing Mode Use the set_mode() method to switch between training and testing mode: model.set_mode('train') # For training model.set_mode('output') # For testing Saving and Loading Models You can save and load models using the following methods:","title":"Train the model"},{"location":"usage/#save-the-model","text":"model.save(\"model.pth\")","title":"Save the model"},{"location":"usage/#load-the-model","text":"model.load(\"model.pth\") Refer to the example on the next page to see how this all works together in a real-world scenario.","title":"Load the model"}]}